<section class="phx-hero">
  <h1>REST API Todo Example</h1>
  <p>This is an example using vanilla js and rest endpoints.
  right click a todo to delete, left click a todo to edit.</p>
</section>

<h2>Todos</h2>
<div>
  <label>Add a todo</label>
  <input id="todo-creator">
</div>
<ul id="todo-list">
  <%= for %{id: id, value: todo} <- @todos do %>
    <li id=<%= id %> style="cursor: pointer">
      <%= todo %>
    </li>
  <% end %>
</ul>

<script>
  function $(elt){ return document.querySelector(elt) }

  async function requestFunc({url, method, body}){
    const requestUrl = (url || '')
    const headers = {
      'Content-Type': 'application/json'
    }

    const response = await fetch(requestUrl,{
      method: method,
      headers: headers,
      body: body ? JSON.stringify(body): undefined
    }).then(res => res.json())

    return response
  }

  const request = {
    get: function(url) {return requestFunc({url: url, method:"GET"})},
    post: function(url, body) {return requestFunc({url: url, method: "post", body: body})},
  }

  async function getAll(){
    return request.get("/api/todos")
  }

  async function create(todo){
    return request.post("/api/todos/create", {value: todo} )
  }

  async function del(id){
    return request.post("/api/todos/delete", {id: id} )
  }

  async function update(id, newTodo) {
    return request.post("/api/todos/update", {id: id, value: newTodo})
  }

  const todos = {
    getAll: getAll,
    create: create,
    delete: del,
    update: update
  }

  function addToList({id, value}){
    const todoList = $("#todo-list")
    const newTodo = document.createElement('li')
    newTodo.innerText = value
    newTodo.id = id
    newTodo.setAttribute("style", "cursor: pointer")
    todoList.appendChild(newTodo)
  }

  function removeFromList(elt){
    elt.remove()
  }

  let fallback
  function editListElement(elt) {
    const value = elt.innerText
    const id = elt.id

    fallback = {
      value: value, id: id
    }

    const input = document.createElement('input')
    input.value = value
    input.id = id

    elt.parentNode.replaceChild(input, elt)
    return input
  }

  function removeInputs(newValues){
    if(!newValues) return
    let input = $("#todo-list > input")
    if(!input) return
    const listElt = document.createElement('li')
    listElt.innerText = newValues.value
    listElt.id = newValues.id
    listElt.setAttribute("style", "cursor: pointer")

    input.parentNode.replaceChild(listElt, input)
    fallback = undefined
  }

  const dom = {
    addToList: addToList,
    removeFromList: removeFromList,
    editListElement: editListElement,
    removeInputs: removeInputs
  }

  $("#todo-creator").addEventListener("keydown", function(e){
    if(e.target.value !== "" && e.key === "Enter"){
      todos.create($("#todo-creator").value).then(function({id, value}){
        dom.addToList({id, value})
      $("#todo-creator").value = ""
      })
    }
  })

  $("#todo-list").addEventListener("contextmenu", function(e){
    e.preventDefault()
    if(e.target.tagName === "UL") return
    const confirmResponse = true //confirm('Do you want to delete this todo?')
    if(confirmResponse){
      todos.delete(parseInt(e.target.id)).then(function(res){
        if(res.success) dom.removeFromList(e.target)
      })
    }
  })

  $("#todo-list").addEventListener("click", function(e){
    dom.removeInputs(fallback)
    if(e.target.tagName === "INPUT") return true
    e.preventDefault()
    if(e.target.tagName === "UL") return
    const input = dom.editListElement(e.target)
    input.addEventListener("keydown", function(e){
      if(e.key === "Escape") return dom.removeInputs(fallback)
      if(e.key === "Enter" && e.target.value !== ""){
        todos.update(parseInt(e.target.id), e.target.value).then(function(res){
          console.log(res)
          if(res.success) dom.removeInputs({ id: res.updated.id, value: res.updated.value })
        })
      }
    })
    input.focus()
  })




</script>

